// Generated by view binder compiler. Do not edit!
package com.example.io_app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CalendarView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.example.io_app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class HomeWindowViewBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CalendarView calendarView;

  @NonNull
  public final TextView dateTextV;

  @NonNull
  public final TextView hourTextV;

  @NonNull
  public final TextView termsTextV;

  @NonNull
  public final TextView welcomeTextV;

  private HomeWindowViewBinding(@NonNull ConstraintLayout rootView,
      @NonNull CalendarView calendarView, @NonNull TextView dateTextV, @NonNull TextView hourTextV,
      @NonNull TextView termsTextV, @NonNull TextView welcomeTextV) {
    this.rootView = rootView;
    this.calendarView = calendarView;
    this.dateTextV = dateTextV;
    this.hourTextV = hourTextV;
    this.termsTextV = termsTextV;
    this.welcomeTextV = welcomeTextV;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static HomeWindowViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static HomeWindowViewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.home_window_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static HomeWindowViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.calendarView;
      CalendarView calendarView = rootView.findViewById(id);
      if (calendarView == null) {
        break missingId;
      }

      id = R.id.dateTextV;
      TextView dateTextV = rootView.findViewById(id);
      if (dateTextV == null) {
        break missingId;
      }

      id = R.id.hourTextV;
      TextView hourTextV = rootView.findViewById(id);
      if (hourTextV == null) {
        break missingId;
      }

      id = R.id.termsTextV;
      TextView termsTextV = rootView.findViewById(id);
      if (termsTextV == null) {
        break missingId;
      }

      id = R.id.welcomeTextV;
      TextView welcomeTextV = rootView.findViewById(id);
      if (welcomeTextV == null) {
        break missingId;
      }

      return new HomeWindowViewBinding((ConstraintLayout) rootView, calendarView, dateTextV,
          hourTextV, termsTextV, welcomeTextV);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
